"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[385],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8146:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={title:"AsyncData<Value>",sidebar_label:"AsyncData"},l=void 0,c={unversionedId:"async-data",id:"async-data",isDocsHomePage:!1,title:"AsyncData<Value>",description:"The AsyncData type enables representing asynchronous flows (e.g. requests). The type represents the state as a discriminating union, avoiding manual management for loading flows.",source:"@site/docs/async-data.md",sourceDirName:".",slug:"/async-data",permalink:"/boxed/async-data",editUrl:"https://github.com/bloodyowl/rescript-test/edit/main/docs/docs/async-data.md",version:"current",frontMatter:{title:"AsyncData<Value>",sidebar_label:"AsyncData"},sidebar:"docs",previous:{title:"Result",permalink:"/boxed/result"},next:{title:"Future",permalink:"/boxed/future"}},p=[{value:"Create an AsyncData value",id:"create-an-asyncdata-value",children:[]},{value:".map(f)",id:"mapf",children:[]},{value:".flatMap(f)",id:"flatmapf",children:[]},{value:".getWithDefault(defaultValue)",id:"getwithdefaultdefaultvalue",children:[]},{value:".isDone()",id:"isdone",children:[]},{value:".isLoading()",id:"isloading",children:[]},{value:".isNotAsked()",id:"isnotasked",children:[]},{value:".toOption()",id:"tooption",children:[]},{value:".match()",id:"match",children:[]},{value:"TS Pattern interop",id:"ts-pattern-interop",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"AsyncData")," type enables representing asynchronous flows (e.g. requests). The type represents the state as a discriminating union, avoiding manual management for loading flows."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"AsyncData")," can have three possible states:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"NotAsked")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Loading")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Done(value)"))),(0,o.kt)("h2",{id:"create-an-asyncdata-value"},"Create an AsyncData value"),(0,o.kt)("p",null,"To create an async data, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"NotAsked"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Loading")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Done")," constructors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { AsyncData } from "@swan-io/boxed";\n\nconst notAsked = AsyncData.NotAsked();\nconst loading = AsyncData.Loading();\nconst done = AsyncData.Done(1);\n')),(0,o.kt)("p",null,"The async data type provides a few manipulation functions:"),(0,o.kt)("h2",{id:"mapf"},".map(f)"),(0,o.kt)("p",null,"If the asyncData is ",(0,o.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"Done(f(value))"),", otherwise returns ",(0,o.kt)("inlineCode",{parentName:"p"},"NotAsked"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).map((x) => x * 2); // AsyncData.Done(4)\n")),(0,o.kt)("h2",{id:"flatmapf"},".flatMap(f)"),(0,o.kt)("p",null,"If the asyncData is ",(0,o.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"f(value)"),", otherwise returns the async data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'AsyncData.Done(2).flatMap((x) => {\n  if (x > 1) {\n    return AsyncData.NotAsked("some error");\n  } else {\n    return AsyncData.Done(2);\n  }\n});\n')),(0,o.kt)("h2",{id:"getwithdefaultdefaultvalue"},".getWithDefault(defaultValue)"),(0,o.kt)("p",null,"If the async data is ",(0,o.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"value"),", otherwise returns ",(0,o.kt)("inlineCode",{parentName:"p"},"defaultValue"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).getWithDefault(1); // 2\nAsyncData.Loading().getWithDefault(1); // 1\nAsyncData.NotAsked().getWithDefault(1); // 1\n")),(0,o.kt)("h2",{id:"isdone"},".isDone()"),(0,o.kt)("p",null,"Type guard. Checks if the option is ",(0,o.kt)("inlineCode",{parentName:"p"},"Done(value)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).isDone(); // true\nAsyncData.Loading().isDone(); // false\nAsyncData.NotAsked().isDone(); // false\n")),(0,o.kt)("h2",{id:"isloading"},".isLoading()"),(0,o.kt)("p",null,"Type guard. Checks if the option is ",(0,o.kt)("inlineCode",{parentName:"p"},"Loading")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).isLoading(); // false\nAsyncData.Loading().isLoading(); // true\nAsyncData.NotAsked().isLoading(); // false\n")),(0,o.kt)("h2",{id:"isnotasked"},".isNotAsked()"),(0,o.kt)("p",null,"Type guard. Checks if the option is ",(0,o.kt)("inlineCode",{parentName:"p"},"Loading")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).isNotAsked(); // false\nAsyncData.Loading().isNotAsked(); // false\nAsyncData.NotAsked().isNotAsked(); // true\n")),(0,o.kt)("h2",{id:"tooption"},".toOption()"),(0,o.kt)("p",null,"If the result is ",(0,o.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"Some(value)"),", otherwise returns ",(0,o.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"Result.Done(2).toOption(); // Some(2)\nResult.Loading().toOption(); // None\nResult.NotAsked().toOption(); // None\n")),(0,o.kt)("h2",{id:"match"},".match()"),(0,o.kt)("p",null,"Match the async data state"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'const valueToDisplay = result.match({\n  Done: (value) => value,\n  Loading: () => "Loading ...",\n  NotAsked: () => "",\n});\n')),(0,o.kt)("h2",{id:"ts-pattern-interop"},"TS Pattern interop"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { match, select } from "ts-pattern";\nimport { AsyncData } from "@swan-io/boxed";\n\nmatch(asyncData)\n  .with(AsyncData.pattern.Done(select()), (value) => console.log(value))\n  .with(AsyncData.pattern.Loading), () => "Loading ...")\n  .with(AsyncData.pattern.NotAsked), () => "")\n  .exhaustive();\n')))}d.isMDXComponent=!0}}]);